// Generated by CoffeeScript 1.6.3
(function() {
  var SHOTS_BY_ID, changeFavStatus, clickTime, dblclkTimeout, likePending, profile_url, shot, _fn, _i, _len;

  profile_url = $('#t-profile>a').attr('href');

  likePending = false;

  SHOTS_BY_ID = {};

  changeFavStatus = function(shotID, like_or_unlike) {
    var $likeIndicator, $likeLink, $shot, $shotLink, post_obj, shot;
    if (likePending) {
      console.log("ALREADY LIKING SHOT " + likePending);
      return false;
    }
    likePending = shotID;
    shot = SHOTS_BY_ID[shotID];
    $shot = $("#screenshot-" + shotID);
    $shotLink = $('.dribbble-over', $shot);
    $likeLink = $('li.fav a', $shot);
    if (like_or_unlike === 'toggle') {
      like_or_unlike = 'like';
      if (shot.liked) {
        like_or_unlike = 'unlike';
      }
    }
    if (like_or_unlike !== 'like' && like_or_unlike !== 'unlike') {
      likePending = false;
      return;
    }
    post_obj = {
      data: {},
      type: 'POST',
      url: "" + profile_url + "/likes"
    };
    if (shot.liked && like_or_unlike === 'like') {
      $likeIndicator = $('<div class="like-indicator"><div></div></div>');
      $('.dribbble-img', $shot).append($likeIndicator);
      setTimeout(function() {
        return $likeIndicator.remove();
      }, 1000);
      console.log("Shot " + shot.id + " already liked! Dummy!");
      likePending = false;
      return;
    } else if (!shot.liked && like_or_unlike === 'unlike') {
      console.log("Shot " + shot.id + " already unliked! Stupid!");
      likePending = false;
      return;
    }
    if (like_or_unlike === 'unlike') {
      post_obj.data = {
        _method: 'delete'
      };
      post_obj.url = "" + post_obj.url + "/" + shot.id;
    } else {
      post_obj.url = "" + post_obj.url + "?screenshot_id=" + shot.id;
    }
    console.log("Here’s the plan: we’re gonna " + like_or_unlike + " shot number " + shot.id);
    return $.ajax(post_obj).complete(function(x, status) {
      if (status === 'success') {
        if (like_or_unlike === 'unlike') {
          $likeLink.parent().removeClass('marked');
          $likeLink.text(--shot.likes_count);
          shot.liked = false;
          $likeIndicator = $('<div class="un like-indicator"><div></div></div>');
          $('.dribbble-img', $shot).append($likeIndicator);
          setTimeout(function() {
            return $likeIndicator.remove();
          }, 1000);
          console.log("Succesfully unliked shot " + shot.id);
        } else {
          $likeLink.parent().addClass('marked');
          $likeLink.text(++shot.likes_count);
          shot.liked = true;
          $likeIndicator = $('<div class="like-indicator"><div></div></div>');
          $('.dribbble-img', $shot).append($likeIndicator);
          setTimeout(function() {
            return $likeIndicator.remove();
          }, 1000);
          console.log("Succesfully liked shot " + shot.id);
        }
      }
      likePending = false;
    });
  };

  clickTime = 300;

  dblclkTimeout = false;

  if (typeof SHOTS !== 'undefined') {
    _fn = function(shot) {
      var $shot, clickCount;
      $shot = $("#screenshot-" + shot.id);
      $("li.fav a", $shot).click(function() {
        changeFavStatus(shot.id, 'toggle');
        return false;
      });
      clickCount = 0;
      return $('.dribbble-over', $shot).click(function() {
        var _this = this;
        clickCount++;
        clearTimeout(dblclkTimeout);
        if (clickCount >= 2) {
          if (clickCount === 2) {
            changeFavStatus(shot.id, 'like');
          } else {
            console.log(clickCount + ' clicks and counting!');
          }
          dblclkTimeout = setTimeout(function() {
            return clickCount = 0;
          }, clickTime);
        } else {
          dblclkTimeout = setTimeout(function() {
            if (clickCount !== 2) {
              console.log('Double-click didn’t happen. *single tear rolls down face*');
              document.location.href = $(_this).attr('href');
            }
            return clickCount = 0;
          }, clickTime);
        }
        return false;
      });
    };
    for (_i = 0, _len = SHOTS.length; _i < _len; _i++) {
      shot = SHOTS[_i];
      SHOTS_BY_ID[shot.id] = shot;
      _fn(shot);
    }
  }

}).call(this);
