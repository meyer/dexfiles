// Generated by CoffeeScript 1.6.3
(function() {
  (function(d) {
    var changeFavStatus, clickTime, dblclkTimeout, id, likeIndicatorTime, likePending, shotMeta, showLikeIndicator, _ref, _results;
    likePending = false;
    likeIndicatorTime = 1200;
    changeFavStatus = function(shotID, like_or_unlike) {
      var likeLink, post_obj, shot, shotLink, shotMeta;
      if (likePending) {
        console.log("ALREADY LIKING SHOT " + likePending);
        return false;
      }
      likePending = shotID;
      shotMeta = d.shots[shotID];
      shot = document.getElementById("screenshot-" + shotID);
      shotLink = shot.getElementsByClassName('dribbble-over')[0];
      likeLink = shot.querySelectorAll('li.fav a')[0];
      if (like_or_unlike === 'toggle') {
        like_or_unlike = 'like';
        if (shotMeta.liked) {
          like_or_unlike = 'unlike';
        }
      }
      if (like_or_unlike !== 'like' && like_or_unlike !== 'unlike') {
        likePending = false;
        return;
      }
      post_obj = {
        data: {},
        type: 'POST',
        url: "" + d.profileURL + "/likes"
      };
      if (shotMeta.liked && like_or_unlike === 'like') {
        showLikeIndicator(shotMeta.id, {
          action: 'like'
        });
        console.log("Shot " + shotMeta.id + " already liked! Dummy!");
        likePending = false;
        return;
      } else if (!shotMeta.liked && like_or_unlike === 'unlike') {
        console.log("Shot " + shotMeta.id + " already unliked! Stupid!");
        likePending = false;
        return;
      }
      if (like_or_unlike === 'unlike') {
        post_obj.data = {
          _method: 'delete'
        };
        post_obj.url = "" + post_obj.url + "/" + shotMeta.id;
      } else {
        post_obj.url = "" + post_obj.url + "?screenshot_id=" + shotMeta.id;
      }
      console.log("Here’s the plan: we’re gonna " + like_or_unlike + " shot number " + shotMeta.id);
      return dex.utils.ajax(post_obj, function(x, status) {
        if (status === 'success') {
          if (like_or_unlike === 'unlike') {
            likeLink.parentNode.classList.remove('marked');
            likeLink.innerHTML = --shotMeta.likes_count;
            shotMeta.liked = false;
            showLikeIndicator(shotMeta.id, {
              action: 'unlike'
            });
            console.log('UN LIEK');
          } else {
            likeLink.parentNode.classList.add('marked');
            likeLink.innerHTML = ++shotMeta.likes_count;
            shotMeta.liked = true;
            showLikeIndicator(shotMeta.id, {
              action: 'like'
            });
            console.log('LIEK');
          }
        }
        likePending = false;
      });
    };
    showLikeIndicator = function(shotID, options) {
      var eff, likeIndicator, shot, unnn;
      if (likePending) {
        if (parseInt(likePending) !== parseInt(shotID)) {
          console.log('WAT');
          return false;
        }
      }
      unnn = '';
      if ('action' in options) {
        if (options.action === 'like') {

        } else if (options.action === 'unlike') {
          unnn = 'un ';
        } else {
          return false;
        }
      }
      shot = document.getElementById("screenshot-" + shotID);
      likeIndicator = document.createElement('div');
      likeIndicator.classList = '#{unnn}like-indicator';
      likeIndicator.appendChild(document.createElement('div'));
      eff = shot.getElementsByClassName('dribbble-shot')[0];
      eff.appendChild(likeIndicator);
      return setTimeout(function() {
        eff.removeChild(likeIndicator);
        return likePending = false;
      }, likeIndicatorTime);
    };
    if (d.loggedIn) {
      clickTime = 300;
      dblclkTimeout = false;
      if (d.shots) {
        _ref = d.shots;
        _results = [];
        for (id in _ref) {
          shotMeta = _ref[id];
          _results.push((function(id, shotMeta) {
            var clickCount, shot;
            shot = document.getElementById("screenshot-" + shotMeta.id);
            shot.querySelectorAll("li.fav a")[0].addEventListener('click', function(e) {
              changeFavStatus(shotMeta.id, 'toggle');
              return e.preventDefault();
            }, false);
            clickCount = 0;
            return shot.getElementsByClassName('dribbble-over')[0].addEventListener('click', function(e) {
              var _this = this;
              if (e.metaKey) {
                return;
              }
              clickCount++;
              clearTimeout(dblclkTimeout);
              if (clickCount >= 2) {
                if (clickCount === 2) {
                  changeFavStatus(shotMeta.id, 'like');
                } else {
                  console.log(clickCount + ' clicks and counting!');
                }
                dblclkTimeout = setTimeout(function() {
                  return clickCount = 0;
                }, clickTime);
              } else {
                dblclkTimeout = setTimeout(function() {
                  if (clickCount !== 2) {
                    console.log('Double-click didn’t happen. *single tear rolls down face*');
                    console.log(e.target.href);
                    document.location.href = e.target.href;
                  }
                  return clickCount = 0;
                }, clickTime);
              }
              return e.preventDefault();
            });
          })(id, shotMeta));
        }
        return _results;
      }
    }
  })(dex.config);

}).call(this);
